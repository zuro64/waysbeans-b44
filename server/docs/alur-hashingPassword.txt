1. dto
    bikin folder auth
    di dalam folder ini ada dua file 
        1.auth_request.go
            berfungsi untuk menangkap hasil inputan user 
            berserta mendefinisikan data inputan yang harus di validasi
        2.auth_response.go
            berfungsi untuk mengembalikan hasil inputan user 
            jika memang kalau login nya berhasil

2. bcrypt
    bikin folder bcrypt pada folder pkg (pkg -> bcrypt)
    di dalam folder ini ada file untuk hashing password bernama 
    hasing_password.go
    fungsi dari file ini untuk melakukan hashing password 
    agar password yang diterima pada saat user register sudah di salting
    selain daripada untuk register 
    di file ini juga ada fungsi untuk melakukan pencocokan 
    data password pada saat login dengan yang ada di database
    
    1.HashingPassword 
        parameter: password string input user
        return: tipe data string dengan password yang sudah di hashing dengan bcrypt
        dan juga error jika memang ada isi dari error nya

    2.CheckPasswordHash
        parameter: 
        1.password password inputan user
        2.hashedPassword password yang sudah di hashing yang sumber nya dari database
        return:
        1.function ini akan mereturn tipe data boolean 
        dengan kondisi apakah err nil atau tidak


    package bcrypt

    import "golang.org/x/crypto/bcrypt"
    // function untuk hashing pada saat register
    func HashingPassword(password string) (string, error) {
        hashedByte, err := bcrypt.GenerateFromPassword([]byte(password), 10)
        if err != nil {
            return "", err
        }
        return string(hashedByte), nil
    }
    // function untuk pengecekan password input user dengan password di database
    func CheckPasswordHash(password, hashedPassword string) bool {
        err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
        return err == nil
    }

3.repositories -> auth.go
    pada file auth.go repositories ini  memiliki dua function untuk melakukan
    kontak dengan database melalui orm 
    ada dua function yaitu register dan login

    register digunakan untuk melakukan insert ke database 
    dengan parameter menerima struct user dengan bentuk models.User
    lalu hasil dari ini akan mereturn kembali struct user yang sudah di gunakan
    dan function ini return hasil error juga kalau ada

    login digunakan untuk menarik data dari database dengan parameter 
    email lalu function ini mereturn struct models.User yang sudah 
    di isi dengan data dari database table user yang di select 
    dengan parameter email tadi
    dan function ini mereturn error jika ada error

        package repositories

        import (
            "dumbmerch/models"

            "gorm.io/gorm"
        )

        type AuthRepository interface {
            Register(user models.User) (models.User, error)
            Login(email string) (models.User, error)
        }

        func RepositoryAuth(db *gorm.DB) *repository {
            return &repository{db}
        }

        func (r *repository) Register(user models.User) (models.User, error) {
            err := r.db.Create(&user).Error

            return user, err
        }

        func (r *repository) Login(email string) (models.User, error) {
            var user models.User
            err := r.db.First(&user, "email=?", email).Error

            return user, err
        }





4.handlers -> auth.go
    pada file auth.go handler ini memiliki dua function yaitu login dan register
    register melakukan create user ke database table user 
    dan password nya sudah di hashing dengan function HashingPassword crypt 
    melalui function register yang sudah di buat melalui repository
    alur dari register ini adalah :

        1. menerima data input user lewat request dto authdto.AuthRequest

        2. melakukan validasi ulang data input user apa saja yang harus wajib di input

        3. melakukan hashing password dengan function HashingPassword
        yang sudah di bikin di pkg/bcrypt

        4. jika ketiga tahap tadi tidak ada error maka mulai melaukan 
        memasukan data request (inputan user) kedalam models.User

        5. menjalankan function register dari repositories 
        dengan menangkap parameter struct user yang sudah di isi dengan struct 
        models.User
        hasil return dari function Register yang ada di repositories ini 
        akan di tampung pada satu variable yang kita sebut data

        6. lalu jika berhasil maka variable data tadi akan di munculkan 
        dengan dto dari success result dengan format json
